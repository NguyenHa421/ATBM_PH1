ALTER SESSION SET "_ORACLE_SCRIPT" = TRUE;
--Tao user nhan vien
CREATE OR REPLACE PROCEDURE USP_CREATEUSER
AS
    CURSOR CUR IS (SELECT MANV
        FROM ADMIN.TB_NHANSU
        WHERE MANV NOT IN (SELECT USERNAME FROM ALL_USERS) );
    STRSQL VARCHAR(2000);
    USR VARCHAR2(5);
BEGIN
    OPEN CUR;
    
    LOOP
        FETCH CUR INTO USR;
        EXIT WHEN CUR%NOTFOUND;
    
        STRSQL := 'CREATE USER '||USR||' IDENTIFIED BY '||USR;
        EXECUTE IMMEDIATE(STRSQL);
        STRSQL := 'GRANT CONNECT TO '||USR;
        EXECUTE IMMEDIATE(STRSQL);
    END LOOP;
    
    CLOSE CUR;
END;
/

--them user vao role
CREATE OR REPLACE PROCEDURE USP_ADDUSRMEM
    (STRROLE VARCHAR, VTRO VARCHAR)
AS
    CURSOR CUR IS (SELECT MANV
        FROM ADMIN.TB_NHANSU
        WHERE MANV IN (SELECT USERNAME FROM ALL_USERS)
        AND VAITRO = VTRO);
    STRSQL VARCHAR(2000);
    USR VARCHAR2(5);
BEGIN
    OPEN CUR;
    LOOP
        FETCH CUR INTO USR;
        EXIT WHEN CUR%NOTFOUND;
        
        STRSQL := 'GRANT '||STRROLE||' TO '||USR;
        EXECUTE IMMEDIATE (STRSQL);
    END LOOP;
    CLOSE CUR;
END;
/

CALL Drop_OldRole('RL_SINHVIEN');
CREATE ROLE RL_SINHVIEN;
--Tao user sinhvien
CREATE OR REPLACE PROCEDURE USP_CREATEUSER2
AS
    CURSOR CUR IS (SELECT MASV
        FROM ADMIN.TB_SINHVIEN
        WHERE MASV NOT IN (SELECT USERNAME FROM ALL_USERS) );
    STRSQL VARCHAR(2000);
    USR VARCHAR2(10);
BEGIN
    OPEN CUR;
    LOOP
        FETCH CUR INTO USR;
        EXIT WHEN CUR%NOTFOUND;
    
        STRSQL := 'CREATE USER '||USR||' IDENTIFIED BY '||USR;
        EXECUTE IMMEDIATE(STRSQL);
        STRSQL := 'GRANT CONNECT TO '||USR;
        EXECUTE IMMEDIATE(STRSQL);
    END LOOP;
    CLOSE CUR;
END;
/
--Tao user
EXEC USP_CREATEUSER;
EXEC USP_CREATEUSER2;
--Gan role cho sinh vien
CREATE OR REPLACE PROCEDURE USP_GRANTROLESTUDENT
AS
    CURSOR CUR IS (SELECT MASV
        FROM ADMIN.TB_SINHVIEN
        WHERE MASV IN (SELECT USERNAME FROM ALL_USERS) );
    STRSQL VARCHAR(2000);
    USR VARCHAR2(10);
BEGIN
    OPEN CUR;
    LOOP
        FETCH CUR INTO USR;
        EXIT WHEN CUR%NOTFOUND;
        STRSQL := 'GRANT RL_SINHVIEN TO '||USR;
        EXECUTE IMMEDIATE(STRSQL);
    END LOOP;
    CLOSE CUR;
END;
/

EXEC USP_GRANTROLESTUDENT;
CONN ADMIN/group12;
CREATE OR REPLACE FUNCTION CREATE_IDSTUDENT(p_MACT IN VARCHAR2)
RETURN NVARCHAR2
IS
    ID NVARCHAR2(10);
    ID_pre NVARCHAR2(6);
    ID_suff NUMBER(4);
    last_student_id NVARCHAR2(10);
BEGIN
    IF p_MACT = 'CQ' THEN
        ID_pre := 'SV120';
    ELSIF p_MACT = 'CLC' THEN
        ID_pre := 'SV127';
    ELSIF p_MACT = 'CLC' THEN
        ID_pre := 'SV125';
    ELSIF p_MACT = 'CLC' THEN
        ID_pre := 'SV126';
    END IF;
    
    SELECT MASV INTO last_student_id
    FROM ADMIN.TB_SINHVIEN
    WHERE MACT = p_MACT
    ORDER BY SUBSTR(MASV, -3) DESC
    FETCH FIRST 1 ROWS ONLY;
    
    IF last_student_id IS NULL THEN
        ID_suff := '000';
    ELSE
        ID_suff := TO_NUMBER(SUBSTR(last_student_id, -3)) + 1;
    END IF;
    ID := ID_pre || LPAD(TO_CHAR(ID_suff), 3, '0');
    RETURN ID;
END CREATE_IDSTUDENT;
/
GRANT EXECUTE ON ADMIN.CREATE_IDSTUDENT TO RL_GIAOVU;

CONN ADMIN/group12;
CREATE OR REPLACE PROCEDURE CreateNewID(p_MACT IN VARCHAR2)
AS
v_student_id NVARCHAR2(10);
BEGIN
  v_student_id := ADMIN.CREATE_IDSTUDENT(p_MACT);
  DBMS_OUTPUT.PUT_LINE('ID sinh viên moi: ' || v_student_id);
END;
/
GRANT EXECUTE ON ADMIN.CreateNewID TO RL_GIAOVU;

CONN NV093/NV093;
EXEC ADMIN.CreateNewID('CT');
/
SELECT MASV 
FROM ADMIN.TB_SINHVIEN
WHERE MACT = 'CQ'
ORDER BY TO_NUMBER(SUBSTR(MASV, -3)) DESC
FETCH FIRST 1 ROWS ONLY;